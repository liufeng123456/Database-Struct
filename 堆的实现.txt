堆的实现
Heap.h实现
#pragma once
typedef int DataType;
typedef int(*PCOM)(DataType,DataType);
int Less(DataType left, DataType right);
int Greater(DataType left, DataType right);
typedef struct Heap {
	DataType* array;
	int size;
	int capacity;
	PCOM Compare;
}Heap;
void Swap(int* a, int* b);
void HeapInitEmpty(Heap* hp, DataType capacity, PCOM compare);
void HeapAdjustDown(int* array,int size,int parent, PCOM Compare);
void HeapAdjustUp(int* array, int size, int parent, PCOM Compare);
void HeapInit(Heap* hp, int* array, int size,PCOM compare);
void HeapInsert(Heap* hp, DataType data);
void CheckCapacity(Heap* hp);
void HeapErase(Heap* hp);
int HeapSize(Heap* hp);
int HeapEmpty(Heap* hp);
int HeapTop(Heap* hp);
void HeapDestroy(Heap* hp);
void test1();
void test2();
void TestHeap();


Heap.c实现
#include "Heap.h"
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
void Swap(int* a, int* b) {
	int tmp = *a;
	*a = *b;
	*b = tmp;
}
void HeapAdjustDown(int* a,int size,int parent,PCOM Compare) {
	DataType child = parent * 2 + 1;
	while (child < size) {
		if (child+1<size && Compare(a[child+1] , a[child ])) {
			child = child + 1;
		}
		if (Compare(a[child],a[parent])) {
			Swap(&a[parent], &a[child]);
			parent = child;
			child = parent * 2 + 1;
		} else {
			return;
		}
	}
	
}
int Less(DataType left, DataType right) {
	return left < right;
}
int Greater(DataType left, DataType right) {
	return left > right;
}

void HeapInit(Heap* hp, int* array, int size, PCOM compare) {
	assert(hp);
	hp->array = (DataType*)malloc(sizeof(DataType)*size);
	if (hp->array == NULL) {
		assert(0);
		return;
	}
	hp->capacity = size;
	for (int i = 0; i < size; ++i) {
		hp->array[i] = array[i];
	}
	hp->size = size;
	hp->Compare = compare;
	//接下来调整让这个完全二叉树满足堆的性质
	int root = (size - 2) / 2;
	for (; root >= 0; --root) {
		HeapAdjustDown(hp->array, size, root, hp->Compare);
	}
}
void HeapInitEmpty(Heap* hp, DataType capacity, PCOM compare) {
	assert(hp);
	hp->array = (DataType*)malloc(sizeof(DataType)*capacity);
	hp->capacity = 10;
	hp->size = 0;
	hp->Compare = compare;
}
void CheckCapacity(Heap* hp) {
	assert(hp);
	if (hp->size == hp->capacity) {
		int NewCapacity = hp->capacity * 2;
		DataType* tmp = (DataType*)malloc(sizeof(DataType)*NewCapacity);
		if (tmp == NULL) {
			assert(0);
			return;
		}
		for (int i = 0; i < hp->size; ++i) {
			tmp[i] = hp->array[i];
		}
		free(hp->array);
		hp->array = tmp;
		hp->capacity = NewCapacity;

	}
} 
void HeapAdjustUp(int* array, int size, int child,PCOM Compare) {
	int parent = (child - 1) / 2;
	while (child) {
		if (Compare(array[child] , array[parent])) {
			Swap(&array[child], &array[parent]);
			child = parent;
			parent = (child - 1) / 2;
		} else {
			return;
		}
	}
}
void HeapInsert(Heap* hp, DataType data) {
	CheckCapacity(hp);
	hp->array[hp->size] = data;
	hp->size++;
	HeapAdjustUp(hp->array,hp->size,hp->size-1,hp->Compare);
}
void HeapErase(Heap* hp) {
	assert(hp);
	if (HeapEmpty(hp)) {
		return;
	}
	Swap(&(hp->array[0]), &(hp->array[hp->size - 1]));
	hp->size -= 1;
	HeapAdjustDown(hp->array,hp->size, 0,hp->Compare);
}
int HeapSize(Heap* hp) {
	assert(hp);
	return hp->size;
}
int HeapEmpty(Heap* hp) {
	assert(hp);
	return hp->size == 0;
}
int HeapTop(Heap* hp) {
	assert(hp);
	return hp->array[0];
}

void HeapDestroy(Heap* hp) {
	assert(hp);
	if (hp->array) {
		free(hp->array);
		hp->capacity = 0;
		hp->size = 0;
	}
}
void test1() {
	Heap hp;
	int a[] = { 2,3,5,8,7,4,6,9,1,0 };
	HeapInit(&hp,a,sizeof(a)/sizeof(a[0]),Less);
	printf("%d\n", HeapSize(&hp));
	printf("%d\n", HeapTop(&hp));
	HeapInsert(&hp, -1);
	printf("%d\n", HeapSize(&hp));
	printf("%d\n", HeapTop(&hp));
	HeapErase(&hp);
	printf("%d\n", HeapSize(&hp));
	printf("%d\n", HeapTop(&hp));
	HeapDestroy(&hp);
}
void test2() {
	Heap hp;
	HeapInitEmpty(&hp, 10,Greater);
	int a[] = { 2,3,5,8,7,4,6,9,1,0 };
	for (int i = 0; i < 10; ++i) {
		HeapInsert(&hp, a[i]);
	}
	printf("%d\n", HeapSize(&hp));
	printf("%d\n", HeapTop(&hp));
	HeapInsert(&hp, -1);
	printf("%d\n", HeapSize(&hp));
	printf("%d\n", HeapTop(&hp));
	HeapErase(&hp);
	printf("%d\n", HeapSize(&hp));
	printf("%d\n", HeapTop(&hp));
	HeapDestroy(&hp);
}
void TestHeap() {
	test1();
	printf("*****************\n");
	test2();
}